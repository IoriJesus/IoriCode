# -*- coding: utf-8 -*-
"""faceDetection.ipynb

#Author Montes Martínez Jesús Iori
Automatically generated by Colaboratory.

!pip install cmake dlib face_recognition numpy opencv-python 
import face_recognition as fr
import numpy as np
import os,shutil
import zipfile
import cv2
import io
from google.colab import files
from google.colab.patches import cv2_imshow

uploaded = files.upload()

data = zipfile.ZipFile(io.BytesIO(uploaded['test.zip']),'r') 
data1 = zipfile.ZipFile(io.BytesIO(uploaded['faces.zip']),'r')
data.extractall()
data1.extractall() 

def get_encoded_faces():
  encoded = {}
  for dirpath, dname, fname in os.walk('/content/faces'):
    for f in fname:

      if(f.endswith('.jpg') or f.endswith('.png')):

        face = fr.load_image_file('/content/faces/' + f)
        encoding = fr.face_encodings(face)[0]
        encoded[f.split('.')[0]] = encoding 

  return encoded

def classify_face(im):
  faces = get_encoded_faces()
  faces_encoded = list(faces.values())
  known_face_names = list(faces.keys())

  img = cv2.imread(im)
  face_locations = fr.face_locations(img)
  uknown_face_encodings = fr.face_encodings(img,face_locations)

  face_names = []
  for face_encoding in uknown_face_encodings:
    name = 'uknown'
    matches = fr.compare_faces(faces_encoded, face_encoding)

    face_distances = fr.face_distance(faces_encoded, face_encoding)
    best_match_index = np.argmin(face_distances)

    if(matches[best_match_index]):
      name = known_face_names[best_match_index]

    face_names.append(name)

    for (top, right, bottom, left), name in zip(face_locations,face_names):
      cv2.rectangle(img,(left-20,top-20),(right+20,bottom+20),(255,0,0),2)
      cv2.rectangle(img,(left-20,bottom-15),(right+20,bottom+20),(255,0,0),cv2.FILLED)
      cv2.putText(img,name,(left-20,bottom+15),cv2.FONT_HERSHEY_DUPLEX,0.5,(255,255,255),1)

  while(True):
    cv2_imshow(img)
    return face_names

classify_face('/content/test/test2.jpg')

classify_face('/content/test/test.jpg')

def learning(image):
    c_face =classify_face(image)
    if 'Unknown' in c_face:
      que = input("There is an Unknown Face Would You like Add it to system ")
      if que == 'yes' or que == "Yes":
        imageFileName = input("enter the name of the image file: ")
        shutil.move(imageFileName, './faces')
        print(learning(image))
      else:
        print(c_face)
    else:
      print(c_face)

image = input("enter the name of the image file: ")    
print(learning(image))
